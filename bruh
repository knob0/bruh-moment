

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/wally-rblx/uwuware-ui/main/main.lua"))()

local framework, scrollHandler
while true do
	for _, obj in next, getgc(true) do
		if type(obj) == 'table' and rawget(obj, 'GameUI') then
			framework = obj;
			break
		end	
	end

	for _, module in next, getloadedmodules() do
		if module.Name == 'ScrollHandler' then
			scrollHandler = module;
			break;
		end
	end

	if (type(framework) == 'table') and (typeof(scrollHandler) == 'Instance') then
		break
	end

	wait(1)
end

local runService = game:GetService('RunService')
local userInputService = game:GetService('UserInputService')
local client = game:GetService('Players').LocalPlayer;
local random = Random.new()

local fastWait, fastSpawn, fireSignal, rollChance do
	-- https://eryn.io/gist/3db84579866c099cdd5bb2ff37947cec
	-- bla bla spawn and wait are bad 
	-- can also use bindables for the fastspawn idc

    function fastWait(t)
        local d = 0;
        while d < t do
            d += runService.RenderStepped:wait()
        end
    end

    function fastSpawn(f)
        coroutine.wrap(f)()
    end
	
	-- updated for script-ware or whatever
	-- attempted to update for krnl 
	local set_identity = (type(syn) == 'table' and syn.set_thread_identity) or setidentity or setthreadcontext
	function fireSignal(target, signal, ...)
		-- getconnections with InputBegan / InputEnded does not work without setting Synapse to the game's context level
		set_identity(2) 
		for _, signal in next, getconnections(signal) do
			if type(signal.Function) == 'function' and islclosure(signal.Function) then
				local scr = rawget(getfenv(signal.Function), 'script')
				if scr == target then
					pcall(signal.Function, ...)
				end
			end
		end
		set_identity(7)
	end

	-- uses a weighted random system
	-- its a bit scuffed rn but it works good enough

	function rollChance()
		local chances = {
			{ type = 'Sick', value = library.flags.sickChance },
			{ type = 'Good', value = library.flags.goodChance },
			{ type = 'Ok', value = library.flags.okChance },
			{ type = 'Bad', value = library.flags.badChance },
		}
		
		table.sort(chances, function(a, b) 
			return a.value > b.value 
		end)

		local sum = 0;
		for i = 1, #chances do
			sum += chances[i].value
		end

		if sum == 0 then
			-- forgot to change this before?
			-- fixed 6/5/21
			return chances[random:NextInteger(1, 4)].type 
		end

		local initialWeight = random:NextInteger(0, sum)
		local weight = 0;

		for i = 1, #chances do
			weight = weight + chances[i].value

			if weight > initialWeight then
				return chances[i].type
			end
		end

		return 'Sick' -- just incase it fails?
	end
end

-- they are "weird" because they are in the middle of their Upper & Lower ranges 
-- should hopefully make them more precise!
local chanceValues = {
	Sick = 95.00,
	Good = 92,
	Ok = 87,
	Bad = 77,
}
 
local keyCodeMap = {} -- get keys
    for _, enum in next, Enum.KeyCode:GetEnumItems() do
        keyCodeMap[enum.Value] = enum
    end

if shared._unload then
        pcall(shared._unload)
    end

    function shared._unload()
        if shared._id then
            pcall(runService.UnbindFromRenderStep, runService, shared._id)
        end

        if library.open then
            library:Close()
        end

        library.base:ClearAllChildren()
        library.base:Destroy()
    end

local marked = {}
local hitChances = {}

if shared._id then
	pcall(runService.UnbindFromRenderStep, runService, shared._id)
end

shared._id = game:GetService('HttpService'):GenerateGUID(false)
runService:BindToRenderStep(shared._id, 1, function()
	if (not library.flags.autoPlayer) then return end
    if typeof(framework.SongPlayer.CurrentlyPlaying) ~= 'Instance' then return end
    if framework.SongPlayer.CurrentlyPlaying.ClassName ~= 'Sound' then return end
    local arrows = {}
        for _, obj in next, framework.UI.ActiveSections do
            arrows[#arrows + 1] = obj;
        end

        local count = framework.SongPlayer:GetKeyCount()
        local mode = count .. 'Key'
       
        local arrowData = framework.ArrowData[mode].Arrows

	for i, arrow in next, framework.UI.ActiveSections do
		if (arrow.Side == framework.UI.CurrentSide) and (not marked[arrow]) then 
			local indice = (arrow.Data.Position % count) -- mod 4 because 5%4 -> 0, 6%4 = 1, etc
			local position = indice .. '' -- 4k+
    for idx = 1, #arrows do
            local arrow = arrows[idx]
            if type(arrow) ~= 'table' then
                continue
            end
end
			
			    if (position) then
                    local hitboxOffset = 0 do
                        local settings = framework.Settings;
                        local offset = type(settings) == 'table' and settings.HitboxOffset;
                        local value = type(offset) == 'table' and offset.Value;

                        if type(value) == 'number' then
                            hitboxOffset = value;
                        end

                        hitboxOffset = hitboxOffset / 1000
                    end

				

             

                
				if (arrow.Data.Time == 1.3) then
				--	print('invisible', tableToString(arrow.Data), i, noteTime)
					continue
				end
                if type(arrow.NoteDataConfigs) == 'table' and arrow.NoteDataConfigs.Type == 'Death' then 
                continue -- ignore death notes
                 end
				local songTime = framework.SongPlayer.CurrentTime do
                        local configs = framework.SongPlayer.CurrentSongConfigs
                        local playbackSpeed = type(configs) == 'table' and configs.PlaybackSpeed

                        if type(playbackSpeed) ~= 'number' then
                            playbackSpeed = 1
                        end

                        songTime = songTime /  playbackSpeed
                    end
                
				  local noteTime = math.clamp((1 - math.abs(arrow.Data.Time - (songTime + hitboxOffset))) * 100, 0, 100)

                  local result = rollChance()
                  arrow._hitChance = arrow._hitChance or result;

                
                local hitChance = hitChances[arrow] or rollChance()
				hitChances[arrow] = hitChance
                local keyCode = keyCodeMap[arrowData[position].Keybinds.Keyboard[1]] -- uses keys from key count


				-- if (not chanceValues[hitChance]) then warn('invalid chance', hitChance) end
				if noteTime >= chanceValues[arrow._hitChance] then
					marked[arrow] = true;
					fireSignal(scrollHandler, userInputService.InputBegan, { KeyCode = keyCode, UserInputType = Enum.UserInputType.Keyboard }, false) -- uses 4k+

					-- wait depending on the arrows length so the animation can play
					if arrow.Data.Length > 0 then
						fastWait(arrow.Data.Length + (library.flags.autoDelay1 / 1000))
					else
						fastWait(library.flags.autoDelay / 1000 ) -- 0.1 seems to make it miss more, this should be fine enough?
					end

					fireSignal(scrollHandler, userInputService.InputEnded, { KeyCode = keyCode, UserInputType = Enum.UserInputType.Keyboard }, false) -- uses 4k+
					marked[arrow] = false;
				end
			end
		end
	end
end)

local window = library:CreateWindow('Funky Friday') do
	local folder = window:AddFolder('Main') do
	local toggle = folder:AddToggle({ text = 'BotPlayer', flag = 'autoPlayer' })
         
        folder:AddBind({ text = 'Autoplayer toggle', flag = 'autoPlayerToggle', key = Enum.KeyCode.End, callback = function()
                toggle:SetState(not toggle.state)
            end })

		folder:AddSlider({ text = 'Sick! %', flag = 'sickChance', min = 0, max = 100, value = 100 })
		folder:AddSlider({ text = 'Modz %', flag = 'goodChance', min = 0, max = 100, value = 0 })
		folder:AddSlider({ text = 'Modz %', flag = 'okChance', min = 0, max = 100, value = 0 })
		folder:AddSlider({ text = 'Modz %', flag = 'badChance', min = 0, max = 100, value = 0 })
        folder:AddSlider({ text = 'Release delay (RN)', flag = 'autoDelay', min = 0, max = 350, value = 0 })
        folder:AddSlider({ text = 'Release delay (LN)', flag = 'autoDelay1', min = -150, max = 100, value = -1 })
        end


	local folder = window:AddFolder('Credits') do
		folder:AddLabel({ text = 'Credits' })
		folder:AddLabel({ text = 'UwUWare - UI library' })
		folder:AddLabel({ text = 'Knob- Script' })
		folder:AddLabel({ text = 'Phas- Cutie' })
	end
    window:AddDivider()
    window:AddBind({ text = 'Menu toggle', key = Enum.KeyCode.Delete, callback = function() library:Close() end })
end


library:Init()
